# -*- coding: utf-8 -*-
"""DiseasePrediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-U-Y9VC02RtRFtE0mfDkvsebqzR-zY2N
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split,cross_val_score
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score,confusion_matrix
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.neighbors import KNeighborsClassifier

data=pd.read_csv("/content/dataset.csv")
data.head()

data.describe()

#Remove the space from the symptom columns
data=pd.DataFrame(data)
cols=data.columns
df=data[cols].values.flatten()
s=pd.Series(df)
s=s.str.strip()
s=s.values.reshape(data.shape)
data=pd.DataFrame(s,columns=data.columns)
data.head()

data=data.fillna(0)
data.head()

df1=pd.read_csv('/content/Symptom-severity.csv')
df1.head()

df1['Symptom'].unique()

vals=data.values
symptoms=df1['Symptom'].unique()
for i in range (len(symptoms)):
  vals[vals==symptoms[i]]=df1[df1['Symptom']==symptoms[i]]['weight'].values[0]
d=pd.DataFrame(vals,columns=cols)
d.head()

d=d.replace('dischromic _patches',0)
d=d.replace('foul_smell_of urine',0)
d=d.replace('spotting_ urination',0)
d.head()

(d[cols]==0).all()

d['Disease'].value_counts()

d['Disease'].unique()

newdata=d.iloc[:,1:].values
label=d['Disease'].values

x_train,x_test,y_train,y_test=train_test_split(newdata,label,shuffle=True,train_size=0.85)
print(x_train.shape,x_test.shape,y_train.shape,y_test.shape)

# train the model
model1=SVC()
model1.fit(x_train,y_train)

pred1=model1.predict(x_test)

# conftensor=confusion_matrix(y_test,pred1)
print(accuracy_score(y_test,pred1)*100)
# confmatrix=conftensor.sum(axis=0)
# print(confmatrix)

model2=RandomForestClassifier(n_estimators=50,random_state=35,min_samples_leaf=5)
k=20
scores = cross_val_score(model2, x_train, y_train, cv=k, scoring='accuracy')
mean_accuracy = np.mean(scores)
print(mean_accuracy)

model2.fit(x_train,y_train)
pred2=model2.predict(x_test)

print(accuracy_score(y_test,pred2)*100)

model3=LogisticRegression()
model3.fit(x_train,y_train)

pred3=model3.predict(x_test)

print(accuracy_score(y_test,pred3)*100)

model4=MultinomialNB()
model4.fit(x_train,y_train)

pred4=model4.predict(x_test)

print(accuracy_score(y_test,pred4)*100)

model5=KNeighborsClassifier(3)
model5.fit(x_train,y_train)

pred5=model5.predict(x_test)

print(accuracy_score(y_test,pred5)*100)

